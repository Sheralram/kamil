import { __decorate, __param } from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { NGX_LOADING_X_TOKEN } from './ngx-loading-x-config.token';
import { DEFAULT_CONFIG } from './utils/NgxLoadingXConfig.constants';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-loading-x-config.token";
let NgxLoadingXService = class NgxLoadingXService {
    constructor(config) {
        this.config = config;
        this.defaultConfig = Object.assign({}, DEFAULT_CONFIG);
        if (this.config) {
            this.defaultConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), this.config);
        }
    }
    getDefaultConfig() {
        return Object.assign({}, this.defaultConfig);
    }
};
NgxLoadingXService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_LOADING_X_TOKEN,] }] }
];
NgxLoadingXService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxLoadingXService_Factory() { return new NgxLoadingXService(i0.ɵɵinject(i1.NGX_LOADING_X_TOKEN, 8)); }, token: NgxLoadingXService, providedIn: "root" });
NgxLoadingXService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Optional()), __param(0, Inject(NGX_LOADING_X_TOKEN))
], NgxLoadingXService);
export { NgxLoadingXService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRpbmcteC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvYWRpbmcteC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtbG9hZGluZy14LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUNBQXFDLENBQUM7OztBQUtyRSxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQUc3QixZQUE2RCxNQUF5QjtRQUF6QixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUNwRixJQUFJLENBQUMsYUFBYSxxQkFBTyxjQUFjLENBQUMsQ0FBQTtRQUN4QyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsYUFBYSxtQ0FBTyxjQUFjLEdBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQ3pEO0lBQ0gsQ0FBQztJQUVELGdCQUFnQjtRQUNkLHlCQUFXLElBQUksQ0FBQyxhQUFhLEVBQUM7SUFDaEMsQ0FBQztDQUNGLENBQUE7OzRDQVZjLFFBQVEsWUFBSSxNQUFNLFNBQUMsbUJBQW1COzs7QUFIeEMsa0JBQWtCO0lBSDlCLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7SUFJYSxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtHQUh6QyxrQkFBa0IsQ0FhOUI7U0FiWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR1hfTE9BRElOR19YX1RPS0VOIH0gZnJvbSAnLi9uZ3gtbG9hZGluZy14LWNvbmZpZy50b2tlbic7XG5pbXBvcnQgeyBOZ3hMb2FkaW5nWENvbmZpZyB9IGZyb20gJy4vdXRpbHMvTmd4TG9hZGluZ1hDb25maWcuaW50ZXJmYWNlJztcbmltcG9ydCB7IERFRkFVTFRfQ09ORklHIH0gZnJvbSAnLi91dGlscy9OZ3hMb2FkaW5nWENvbmZpZy5jb25zdGFudHMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hMb2FkaW5nWFNlcnZpY2Uge1xuICBkZWZhdWx0Q29uZmlnOiBOZ3hMb2FkaW5nWENvbmZpZztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HWF9MT0FESU5HX1hfVE9LRU4pIHByaXZhdGUgY29uZmlnOiBOZ3hMb2FkaW5nWENvbmZpZykgeyBcbiAgICB0aGlzLmRlZmF1bHRDb25maWcgPSB7Li4uREVGQVVMVF9DT05GSUd9XG4gICAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmRlZmF1bHRDb25maWcgPSB7Li4uREVGQVVMVF9DT05GSUcsIC4uLnRoaXMuY29uZmlnfVxuICAgIH1cbiAgfVxuXG4gIGdldERlZmF1bHRDb25maWcoKTogTmd4TG9hZGluZ1hDb25maWcge1xuICAgIHJldHVybiB7Li4udGhpcy5kZWZhdWx0Q29uZmlnfVxuICB9XG59XG4iXX0=