import { __assign, __decorate, __param } from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { NGX_LOADING_X_TOKEN } from './ngx-loading-x-config.token';
import { DEFAULT_CONFIG } from './utils/NgxLoadingXConfig.constants';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-loading-x-config.token";
var NgxLoadingXService = /** @class */ (function () {
    function NgxLoadingXService(config) {
        this.config = config;
        this.defaultConfig = __assign({}, DEFAULT_CONFIG);
        if (this.config) {
            this.defaultConfig = __assign(__assign({}, DEFAULT_CONFIG), this.config);
        }
    }
    NgxLoadingXService.prototype.getDefaultConfig = function () {
        return __assign({}, this.defaultConfig);
    };
    NgxLoadingXService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_LOADING_X_TOKEN,] }] }
    ]; };
    NgxLoadingXService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxLoadingXService_Factory() { return new NgxLoadingXService(i0.ɵɵinject(i1.NGX_LOADING_X_TOKEN, 8)); }, token: NgxLoadingXService, providedIn: "root" });
    NgxLoadingXService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional()), __param(0, Inject(NGX_LOADING_X_TOKEN))
    ], NgxLoadingXService);
    return NgxLoadingXService;
}());
export { NgxLoadingXService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRpbmcteC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvYWRpbmcteC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtbG9hZGluZy14LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUNBQXFDLENBQUM7OztBQUtyRTtJQUdFLDRCQUE2RCxNQUF5QjtRQUF6QixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUNwRixJQUFJLENBQUMsYUFBYSxnQkFBTyxjQUFjLENBQUMsQ0FBQTtRQUN4QyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsYUFBYSx5QkFBTyxjQUFjLEdBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQ3pEO0lBQ0gsQ0FBQztJQUVELDZDQUFnQixHQUFoQjtRQUNFLG9CQUFXLElBQUksQ0FBQyxhQUFhLEVBQUM7SUFDaEMsQ0FBQzs7Z0RBVFksUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7OztJQUh4QyxrQkFBa0I7UUFIOUIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztRQUlhLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO09BSHpDLGtCQUFrQixDQWE5Qjs2QkFyQkQ7Q0FxQkMsQUFiRCxJQWFDO1NBYlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdYX0xPQURJTkdfWF9UT0tFTiB9IGZyb20gJy4vbmd4LWxvYWRpbmcteC1jb25maWcudG9rZW4nO1xuaW1wb3J0IHsgTmd4TG9hZGluZ1hDb25maWcgfSBmcm9tICcuL3V0aWxzL05neExvYWRpbmdYQ29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBERUZBVUxUX0NPTkZJRyB9IGZyb20gJy4vdXRpbHMvTmd4TG9hZGluZ1hDb25maWcuY29uc3RhbnRzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4TG9hZGluZ1hTZXJ2aWNlIHtcbiAgZGVmYXVsdENvbmZpZzogTmd4TG9hZGluZ1hDb25maWc7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChOR1hfTE9BRElOR19YX1RPS0VOKSBwcml2YXRlIGNvbmZpZzogTmd4TG9hZGluZ1hDb25maWcpIHsgXG4gICAgdGhpcy5kZWZhdWx0Q29uZmlnID0gey4uLkRFRkFVTFRfQ09ORklHfVxuICAgIGlmICh0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5kZWZhdWx0Q29uZmlnID0gey4uLkRFRkFVTFRfQ09ORklHLCAuLi50aGlzLmNvbmZpZ31cbiAgICB9XG4gIH1cblxuICBnZXREZWZhdWx0Q29uZmlnKCk6IE5neExvYWRpbmdYQ29uZmlnIHtcbiAgICByZXR1cm4gey4uLnRoaXMuZGVmYXVsdENvbmZpZ31cbiAgfVxufVxuIl19