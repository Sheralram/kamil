import { __decorate } from "tslib";
import { Directive, Renderer2, ElementRef, Input, OnChanges } from '@angular/core';
import { NgxLoadingXService } from './ngx-loading-x.service';
var NgxLoadingXBlurDirective = /** @class */ (function () {
    function NgxLoadingXBlurDirective(renderer, elementRef, ngxLoadingXService) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.ngxLoadingXService = ngxLoadingXService;
        this.defaultConfig = this.ngxLoadingXService.getDefaultConfig();
        this.blur = this.defaultConfig.bgBlur;
        this.show = this.defaultConfig.show;
    }
    NgxLoadingXBlurDirective.prototype.ngOnChanges = function () {
        if (this.show) {
            var blurValue = "blur(" + this.blur + "px)";
            this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', blurValue);
            this.renderer.setStyle(this.elementRef.nativeElement, 'filter', blurValue);
        }
        else {
            var blurValue = "none";
            this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', blurValue);
            this.renderer.setStyle(this.elementRef.nativeElement, 'filter', blurValue);
        }
    };
    NgxLoadingXBlurDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgxLoadingXService }
    ]; };
    __decorate([
        Input()
    ], NgxLoadingXBlurDirective.prototype, "blur", void 0);
    __decorate([
        Input()
    ], NgxLoadingXBlurDirective.prototype, "show", void 0);
    NgxLoadingXBlurDirective = __decorate([
        Directive({
            selector: '[NgxLoadingXBlur]'
        })
    ], NgxLoadingXBlurDirective);
    return NgxLoadingXBlurDirective;
}());
export { NgxLoadingXBlurDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRpbmcteGJsdXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvYWRpbmcteC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtbG9hZGluZy14Ymx1ci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBTzdEO0lBT0Usa0NBQW9CLFFBQW1CLEVBQVUsVUFBc0IsRUFBVSxrQkFBc0M7UUFBbkcsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3JILElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFaEUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFFRCw4Q0FBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBTSxTQUFTLEdBQUcsVUFBUSxJQUFJLENBQUMsSUFBSSxRQUFLLENBQUM7WUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDbkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzVFO2FBQU07WUFDTCxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUM7WUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDbkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQzs7Z0JBakI2QixTQUFTO2dCQUFzQixVQUFVO2dCQUE4QixrQkFBa0I7O0lBSDlHO1FBQVIsS0FBSyxFQUFFOzBEQUFNO0lBQ0w7UUFBUixLQUFLLEVBQUU7MERBQU07SUFMSCx3QkFBd0I7UUFKcEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG1CQUFtQjtTQUM5QixDQUFDO09BRVcsd0JBQXdCLENBeUJwQztJQUFELCtCQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0F6Qlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neExvYWRpbmdYU2VydmljZSB9IGZyb20gJy4vbmd4LWxvYWRpbmcteC5zZXJ2aWNlJztcbmltcG9ydCB7IE5neExvYWRpbmdYQ29uZmlnIH0gZnJvbSAnLi4vcHVibGljLWFwaSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tOZ3hMb2FkaW5nWEJsdXJdJ1xufSlcblxuZXhwb3J0IGNsYXNzIE5neExvYWRpbmdYQmx1ckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIGRlZmF1bHRDb25maWc6IE5neExvYWRpbmdYQ29uZmlnO1xuICBcbiAgXG4gIEBJbnB1dCgpIGJsdXI7XG4gIEBJbnB1dCgpIHNob3c7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmd4TG9hZGluZ1hTZXJ2aWNlOiBOZ3hMb2FkaW5nWFNlcnZpY2UpIHtcbiAgICB0aGlzLmRlZmF1bHRDb25maWcgPSB0aGlzLm5neExvYWRpbmdYU2VydmljZS5nZXREZWZhdWx0Q29uZmlnKCk7XG5cbiAgICB0aGlzLmJsdXIgPSB0aGlzLmRlZmF1bHRDb25maWcuYmdCbHVyO1xuICAgIHRoaXMuc2hvdyA9IHRoaXMuZGVmYXVsdENvbmZpZy5zaG93O1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuc2hvdykge1xuICAgICAgY29uc3QgYmx1clZhbHVlID0gYGJsdXIoJHt0aGlzLmJsdXJ9cHgpYDtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICctd2Via2l0LWZpbHRlcicsIGJsdXJWYWx1ZSk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZmlsdGVyJywgYmx1clZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYmx1clZhbHVlID0gYG5vbmVgO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJy13ZWJraXQtZmlsdGVyJywgYmx1clZhbHVlKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdmaWx0ZXInLCBibHVyVmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIl19